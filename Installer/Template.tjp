project projectid "My project"  2020-01-01 +12m {
	timezone "Europe/Berlin"
	currency "EUR"
	timeformat "%Y-%m-%d"            # YYYY-MM-DD
	numberformat "-" "" "," "." 1    # <negativeprefix> <negativesuffix> <thousandsep> <fractionsep> <fractiondigits>
	currencyformat "-" "" "," "." 0  # <negativeprefix> <negativesuffix> <thousandsep> <fractionsep> <fractiondigits>
	timingresolution 60 min          # default: 60, max: 60, min:5
	weekstartsmonday
	dailyworkinghours 8
}

# You can add explanations using single line comments

/*
Or multiline comments, if the explanation is very long.
*/

# You can define the daily cost of a resource
rate 300.0

# Specify public / national holidays for accurate scheduling
leaves holiday "Christmas" 2020-12-25 +1d

# Resources can be hierarchical. That's useful for creating teams
resource teamname "My Team" {
  # You can never work 8 hours a day efficiently. Let's go the 80/20 rule for the whole team.
  limits {dailymax 6.4h} #80%
  
  # Maybe the whole team is on a training and the project does not make progress during that time
  leaves special 2020-03-10 - 2020-03-12
  
  resource personid "My Employee" {
        # Specify the employee's personal vacation 
		leaveallowances annual 2020-01-01 20d
		leaves annual 2020-01-01 - 2020-01-08
		leaves annual 2020-12-23 - 2020-12-31
		# It's possible that someone is ill for a while
		leaves sick 2020-03-05 - 2020-03-06
  }
}

# Tasks define the work that's to be done. Like resources, they can be hierachical.

task taskid "My Task"{
    # Who works on that task? Let's keep things simple, assuming everyone can work on everything.
	allocate teamname
	start 2020-03-01
	
	task subtaskid "My Subtask" {
		task level3task "My Task on level 3" {	
		    # Tasks can be scheduled by effort, which is typical on software development projects			
			effort 10d 
			complete 50
		}
		task follower "Follower task" {	
		    # This is a forward dependency. ! goes up one level
			depends !level3task { gapduration 2w }
			effort 40h 
			complete 0
		}
		task preceding "Preceding task" {
		    # This is a backward dependency.
			precedes !follower
			effort 1w
		}
	}
	task documentation "Documentation" {
		# Tasks can also be scheduled by duration. This is useful for stuff that appears regularly.
		duration 3w
		limits { dailymax 0.5h }
	}
	task doccomplete "Documentation complete" {
		depends !documentation
		# Yippieh! We can reach a milestone and celebrate progress!
		milestone
	}
}

resourcereport "resources" {
  formats html
  columns name, annualleave, annualleavebalance, sickleave, specialleave, unpaidleave
}

resourcereport allocationGraph "graph" {
	headline "Resource Allocation Graph"
	columns name, effort, rate, weekly { width 1070 }
	loadunit shortauto
	hidetask ~(isleaf() & isleaf_())
	sorttasks plan.start.up
}

taskreport projectBreakdown "ProjectBreakdown" {
	headline "Project Breakdown"
	columns name, start, end, daily { width 1070 }
	hideresource 1
}


macro TaskTip [
  tooltip istask() -8<-
    '''Start: ''' <-query attribute='start'->
    '''End: ''' <-query attribute='end'->
    ----
    '''Resources:'''

    <-query attribute='resources'->
    ----
    '''Precursors: '''

    <-query attribute='precursors'->
    ----
    '''Followers: '''

    <-query attribute='followers'->
    ->8-
]

taskreport overview "tasks" {
	formats html
	columns bsi { title 'WBS' },
          name, start, end, effort, duration,
		  chart { ${TaskTip} width 1070 } # The total report will be at ~1600 px then
}

navigator navbar {
  hidereport 0
}

textreport frame "index" {
  header -8<-
    == Project My Project	==
    <[navigator id="navbar"]>
  ->8-
  
  textreport "Overview" {
    formats html
    center '<[report id="overview"]>'
  }
  
  textreport "Allocation graph" {
    formats html
    center '<[report id="allocationGraph"]>'
  }
  
  textreport "Project Breakdown" {
    formats html
    center '<[report id="projectBreakdown"]>'
  }
}